# 백준 2667. 단지번호붙이기

### 문제 설명:

<p>정사각형 모양의 지도가 있다. 1은 집이 있는 곳을, 0은 집이 없는 곳을 나타낸다. 어떤 집이 좌우, 혹은 위아래로 다른 집이 있는 경우를 연결되었다고 하고, 연결된 집의 모임을 단지로 정의한다. 총 단지수를 출력하고, 각 단지에 속하는 집의 수를 오름차순으로 정렬하여 출력하라</p>

### 풀이:

DFS방식으로 배열을 순회. 방문하지 않은 집의 상하좌우 집을 재귀호출하고 집 수를 세는 방식.<br>

1. DFS함수 생성
2. x,y좌표가 범위를 벗어나면 false 리턴
3. 방문하지 않은 집일 경우,
   1) 방문상태로 변경
   2) 집 수 cnt++
   3) 상하좌우 집 재귀호출
   4) 재귀 종료 시 true 리턴
4. 방문한 집일 경우 false 리턴
5. Main함수에서 2차원 배열을 순회하면서 DFS함수 호출, true일 경우 단지가 존재하므로 집 수 저장
6. 저장한 집 수 배열 오름차순 정렬

### 코드:

```java
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
	static char[][] graph;
	static int cnt = 0;
	static int N;
	
	static boolean DFS(int x, int y) {
		if(x<0 || x>=N || y<0 || y>=N)
			return false;
		
		if(graph[x][y] == '1') {	// 방문하지 않았을 경우
			graph[x][y] = '0';		// 방문상태로 변경
			cnt++;					// 집 수 세기
			DFS(x-1,y);				// 상하좌우 호출
			DFS(x+1,y);
			DFS(x,y-1);
			DFS(x,y+1);
			return true;
		}
		return false;
	}
	public static void main(String [] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringBuilder sb = new StringBuilder();
		N = Integer.parseInt(br.readLine());
		graph = new char[N][N];
		ArrayList<Integer> cntArr = new ArrayList<>();
		
		for(int i=0; i<N; i++) {
			String line = br.readLine();	
			graph[i] = line.toCharArray();
		}
		
		for(int i=0; i<N; i++) {
			for(int j=0; j<N; j++) {
				if(DFS(i,j)) {
					cntArr.add(cnt);	// 단지가 존재하면 집 수 add(단지별 집 수 저장)
					cnt = 0;
				}
			}
		}
		Collections.sort(cntArr);
		sb.append(cntArr.size()+"\n");
		for(int i: cntArr) {
			sb.append(i).append("\n");
		}
		System.out.println(sb);	
	}
}

```

<br><br>


# 백준 7576. 토마토

### 문제 설명:

<p>가로M, 세로N 크기의 상자에 토마토가 들어있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토의 인접한 곳은 왼쪽, 오른쪽, 앞, 뒤 네 방향에 있는 토마토를 의미한다.며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라. 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다. 만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다. 정수 1은 익은 토마토, 정수 0은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다.</p>

### 풀이:

<p>BFS를 이용하여 </p>

1. 토마토 정보를 입력받으면서, 익은 토마토 위치를 큐에 추가하고, 안익은 토마토의 개수를 셈. 안익은 토마토의 개수가 0이면 0 출력.
2. BFS 함수에서, 큐가 빌 때까지 반복:
   1) 큐에서 현재 위치를 꺼내어 변수에 x,y를 저장.
   2) 현재 위치의 날짜 저장 `day`
   3) 다음 위치(상/하/좌/우)로 이동
   4) 이동한 위치가 범위를 벗어나면 `continue`
   5) 이동한 위치에 방문 이력이 없을 경우, 소요 날짜를 +1 (이전위치+1)하고, 익은 토마토 수 증가시키고 좌표를 큐에 넣기
3. BFS함수에서 센 안익은 토마토 개수가 실제 안익은 개수와 다르면 -1 출력, 아닐 경우 `day-1` 출력(처음에 날짜를 1부터 count 했으므로)

### 코드:

```java
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main14 {
	static int[][] graph;
	static Queue<int []> que = new LinkedList<>();
	static int M, N;
	static int cnt = 0, day = 0, result = 0;
	static int[] dx = {-1,0,1,0};
	static int[] dy = {0,-1,0,1};
	
	static void BFS() {
		while(!que.isEmpty()) {
			int cur[] = que.poll();
			int cx = cur[0];
			int cy = cur[1];
			day = graph[cx][cy];
			
			for(int i=0; i<4; i++) {
				int nx = cx+dx[i];
				int ny = cy+dy[i];
				
				if(nx<0 || nx>=N || ny<0 || ny>=M)
					continue;
				
				if(graph[nx][ny]==0) { // 인접토마토 미방문시
					graph[nx][ny] = graph[cx][cy]+1; // 날짜 증가
					result++;	// 익은 토마토 수 증가
					que.offer(new int[] {nx,ny});
				}
			}
		}
	}
	
	public static void main(String [] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		cnt = 0;
		graph = new int[N][M];
		for(int i=0; i<N; i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0; j<M; j++) {
				graph[i][j] = Integer.parseInt(st.nextToken());
				if(graph[i][j]==1) 	// 익은토마토를 큐에 추가
					que.offer(new int[] {i,j});
				else if(graph[i][j] == 0)	// 안익은 토마토 개수 세기
					cnt++;
			}
		}

		if(cnt==0) {	// 안익은 토마토가 없으면 최소날짜 0
			System.out.println(0);
		} 

		else {	
			BFS();
			System.out.println((cnt!=result) ? -1 : day-1);		// 안익은토마토 개수가 불일치하면 -1출력,
																// 아닐경우 처음에 날짜를 1부터 count했으므로 day-1 출력
		}
	}
}

```

<br><br>


# 백준 1715. 카드 정렬하기

### 문제 설명:

<p>정렬된 두 묶음의 숫자 카드가 있다고 하자. 각 묶음의 카드의 수를 A, B라 하면 보통 두 묶음을 합쳐서 하나로 만드는 데에는 A+B 번의 비교를 해야 한다. 카드를 두 묶음씩 골라 서로 합쳐나간다면, 고르는 순서에 따라서 비교 횟수가 매우 달라진다. 예를 들어 10장, 20장, 40장의 묶음이 있다면 10장과 20장을 합친 뒤, 합친 30장 묶음과 40장을 합친다면 (10 + 20) + (30 + 40) = 100번의 비교가 필요하다. N개의 숫자 카드 묶음의 각각의 크기가 주어질 때, 최소한 몇 번의 비교가 필요한지를 구하는 프로그램을 작성하시오.</p>

### 풀이:

<p>크기가 작은 카드를 우선 선택해야 최소횟수로 비교할 수 있음 -> 우선순위 큐 이용</p>

1. 우선순위 큐에 카드를 모두 넣음
2. 큐에 남은 카드가 1이 될 때까지 반복:
   1) 큐에 있는 카드 두 개를 꺼냄
   2) sum에 합함
   3) 큐에 카드 두개의 합을 넣음(누적합해야하므로)

### 코드:

```java
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

public class Main {
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		PriorityQueue<Integer> que = new PriorityQueue<>();
		
		for(int i=0; i<N; i++) {
			que.offer(Integer.parseInt(br.readLine()));
		}
		int sum = 0;
		while(que.size() > 1) {
			int x1 = que.poll();
			int x2 = que.poll();
			sum += x1+x2;
			que.offer(x1+x2);
		}
		System.out.println(sum);
	}
}

```

<br><br>


# 프로그래머스- 실패율

### 문제 설명:

<p>전체 스테이지의 개수 N, 게임을 이용하는 사용자가 현재 멈춰있는 스테이지의 번호가 담긴 배열 stages가 매개변수로 주어질 때, 실패율이 높은 스테이지부터 내림차순으로 스테이지의 번호가 담겨있는 배열을 return 하도록 solution 함수를 완성하라. 실패율은 스테이지에 도달했으나 아직 클리어하지 못한 플레이어의 수 / 스테이지에 도달한 플레이어 수 로 정의한다. 만약 실패율이 같은 스테이지가 있다면 작은 번호의 스테이지가 먼저 오도록 하면 된다. 스테이지에 도달한 유저가 없는 경우 해당 스테이지의 실패율은 0 으로 정의한다. </p>

### 풀이:

<p></p>

1. 사용할 배열-> `fail[]`: 스테이지에 도달했으나 실패한 유저의 수, `achieve[]`: 스테이지별 총 도달유저 수, `result[][]`: 실패율 
2. stages[] 오름차순 정렬
3. 도달했지만 실패한 유저 수 세기: 해당 스테이지 인덱스 값 ++
4. 스테이지 별 총 도달 유저 수 세기: 이전 스테이지의 총 유저 수에서 실패한 유저만큼을 뺌
5. 스테이지 별 실패율 계산: 2차원 배열에 실패율과 스테이지번호를 각각 저장
6. 실패율(1순위)-스테이지번호(2순위) 기준 정렬

### 코드:

```java
import java.util.*;

class Solution {
	public int[] solution(int N, int[] stages) {
	  int[] answer = {};
	  int fail[] = new int[N+2];  // 도달했지만 실패한 유저 수
	  int achieve[] = new int[N+1];   // statge별 총 도달유저 수
	  double result[][] = new double[N][2]; // 실패율
	  
	  Arrays.sort(stages);
	  
	  // 도달했지만 실패한 유저 수++
	  for(int i: stages){
	      if(i<=N){
	          fail[i]++;
	      }
	  }
	  // 스테이지별 총 도달유저 수
	  int total = stages.length;
	  for(int i=1; i<=N; i++){
	      achieve[i] = total;
	      total -= fail[i];
	  }
	  
	  // 스테이지별 실패율
	  for(int i=1; i<=N; i++){
	      result[i-1][0] = (achieve[i]==0) ? 0.0 : fail[i]/(double)achieve[i];
	      result[i-1][1] = i;
	  }
	
	  // 정렬
	  Arrays.sort(result, (o1, o2)->{
	      if(o1[0]==o2[0]){
	          return Double.compare(o1[1],o2[1]);
	      }
	      return Double.compare(o2[0],o1[0]);
	  });
	  
	  answer = new int[N];
	  for(int i=0; i<N; i++)
	      answer[i] = (int)result[i][1];
	  return answer;
	}
}
```

